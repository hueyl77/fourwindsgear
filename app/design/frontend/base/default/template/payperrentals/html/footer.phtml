<script type="text/javascript">
if (typeof $jpprTop == "undefined") {
    $jpprTop = jQuery.noConflict();
}
addElementTo = function () {
    Element.insert($('product_addtocart_form'), "<input type='hidden' name='is_reservation' value='2'/>");
};
disabledQty = function () {
    $jpprTop('.qty-disabled').each(function () {
        $jpprTop(this).removeAttr('disabled');
    });
};

setBuyoutToTrue = function () {
    $jpprTop('#buyout').val(true);
};

getActionsDiv = function (obj, canBeLink) {
    var retObj;
    retObj = obj.closest('form').find('.btn-cart');
    if(retObj.length == 0){
        retObj = obj.find('.btn-cart');
    }
    if(retObj.length == 0){
        retObj = obj.parent().find('.btn-cart');
    }
    if(retObj.length == 0){
        retObj = obj.parent().parent().find('.btn-cart');
    }
    if(typeof canBeLink !== 'undefined' && canBeLink == true) {
        if (retObj.length == 0) {
            retObj = obj.parent().find('a.button');
        }
        if (retObj.length == 0) {
            retObj = obj.parent().parent().find('a.button');
        }
    }

    if(retObj.length == 0){
        retObj = obj.parent().find('button.button');
    }
    if(retObj.length == 0){
        retObj = obj.parent().parent().find('button.button');
    }

    return retObj.filter(":first");

};

adjustCss = function (obj) {
    obj.parent().css('position', 'static');
    $jpprTop('.product-shop .qty').css('margin','0px');
    $jpprTop('.product-shop .qty').css('margin-right','5px');
};

changeText = function (obj, textVal) {
    var $target = obj.children();
    var iconClass = ['btn-arrow','icon-cart', 'icon-basket'];
    var hasClassToExclude = false;
    var $targetBefore = '';
    if($target.length){
        var $next = $target;

        while ($next.length) {
            $target = $next;

            for ( var i = 0; i < iconClass.length; i++ )
            {
                if ( $target.hasClass( iconClass[i] ) )
                {
                    $targetBefore = $target.parent();
                    hasClassToExclude = true;
                    break;
                }
            }
            if(hasClassToExclude) break;
            $next = $next.children();
        }
        if(!hasClassToExclude){
            $target.text(textVal);
        }else{
            $targetBefore.text(textVal);
            $targetBefore.prepend($target);

        }
    }else{
        obj.text(textVal);
    }


}

var alignProductGridActions = function () {
    // Loop through each product grid on the page
    $jpprTop('.products-grid').each(function () {
        var gridRows = []; // This will store an array per row
        var tempRow = [];
        productGridElements = $jpprTop(this).children('li');
        productGridElements.each(function (index) {
            // The JS ought to be agnostic of the specific CSS breakpoints, so we are dynamically checking to find
            // each row by grouping all cells (eg, li elements) up until we find an element that is cleared.
            // We are ignoring the first cell since it will always be cleared.
            if ($jpprTop(this).css('clear') != 'none' && index != 0) {
                gridRows.push(tempRow); // Add the previous set of rows to the main array
                tempRow = []; // Reset the array since we're on a new row
            }
            tempRow.push(this);

            // The last row will not contain any cells that clear that row, so we check to see if this is the last cell
            // in the grid, and if so, we add its row to the array
            if (productGridElements.length == index + 1) {
                gridRows.push(tempRow);
            }
        });

        $jpprTop.each(gridRows, function () {
            var tallestProductInfo = 0;
            $jpprTop.each(this, function () {
                // Since this function is called every time the page is resized, we need to remove the min-height
                // and bottom-padding so each cell can return to its natural size before being measured.
                $jpprTop(this).find('.product-info').css({
                    'min-height': '',
                    'padding-bottom': ''
                });

                // We are checking the height of .product-info (rather than the entire li), because the images
                // will not be loaded when this JS is run.
                var productInfoHeight = $jpprTop(this).find('.product-info').height();
                // Space above .actions element
                var actionSpacing = 10;
                // The height of the absolutely positioned .actions element
                var actionHeight = $jpprTop(this).find('.product-info .actions').height();

                // Add height of two elements. This is necessary since .actions is absolutely positioned and won't
                // be included in the height of .product-info
                var totalHeight = productInfoHeight + actionSpacing + actionHeight;
                if (totalHeight > tallestProductInfo) {
                    tallestProductInfo = totalHeight;
                }

                // Set the bottom-padding to accommodate the height of the .actions element. Note: if .actions
                // elements are of varying heights, they will not be aligned.
                $jpprTop(this).find('.product-info').css('padding-bottom', actionHeight + 'px');
            });
            // Set the height of all .product-info elements in a row to the tallest height
            $jpprTop.each(this, function () {
                $jpprTop(this).find('.product-info').css('min-height', tallestProductInfo);
            });
        });
    });
}
function getInternetExplorerVersion()
{
    var rv = -1;
    if (navigator.appName == 'Microsoft Internet Explorer')
    {
        var ua = navigator.userAgent;
        var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
        if (re.exec(ua) != null)
            rv = parseFloat( RegExp.$1 );
    }
    else if (navigator.appName == 'Netscape')
    {
        var ua = navigator.userAgent;
        var re  = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
        if (re.exec(ua) != null)
            rv = parseFloat( RegExp.$1 );
    }
    return rv;
}
adjustHeightOfGridList = function () {
    $jpprTop('.products-grid .product-info').css('padding-bottom', '0px');
    $jpprTop('.products-grid .product-info').css('min-height', '');
    $jpprTop('ul.display li .product-image-col .button').css('position', 'static');
    var currentTallest = 0,
        currentRowStart = 0,
        rowDivs = new Array(),
        $el,
        topPosition = 0;

    $jpprTop('ul.products-grid li.item').each(function() {
        $el = $jpprTop(this);
        topPosition = $el.position().top;
        $el.css('padding-bottom', '0px');
        if (currentRowStart != topPosition) {

            // we just came to a new row.  Set all the heights on the completed row
            for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) {
                if(getInternetExplorerVersion() !== -1) {
                    rowDivs[currentDiv].height(currentTallest - 100);
                }
                rowDivs[currentDiv].find('.product-info').css('min-height','');
                rowDivs[currentDiv].find('.actions').css('position','static');
            }

            // set the variables for the new row
            rowDivs.length = 0; // empty the array
            currentRowStart = topPosition;
            currentTallest = $el.height();
            rowDivs.push($el);

        } else {

            // another div on the current row.  Add it to the list and check if it's taller
            rowDivs.push($el);
            currentTallest = (currentTallest < $el.height()) ? ($el.height()) : (currentTallest);

        }

        // do the last row
        for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) {
            if(getInternetExplorerVersion() !== -1) {
                rowDivs[currentDiv].height(currentTallest + 100);
            }
            rowDivs[currentDiv].find('.product-info').css('min-height','');
            rowDivs[currentDiv].find('.actions').css('position','static');
        }

    });
    //alignProductGridActions();
}

addQueueAndBuyoutButtons = function (addType) {

    $jpprTop('.ppr_attr_sel_days').each(function () {
        var location = $jpprTop(this).attr('href');
        var butName = $jpprTop(this).val();

        if (addType == 1) {
            var jButton = $jpprTop('<button type="button" title="' + butName + '" style="margin-top:5px" class="button btn-cart bseldays" onclick="setLocation(\'' + location + '\')"><span><span>' + butName + '</span></span></button>');
            var nextDiv = getActionsDiv($jpprTop(this).parent());
            nextDiv.parent().find('.button').not('.bqueue').not('.bseldays').remove();
            nextDiv.after(jButton);
        }
    });

    $jpprTop('.ppr_attr_queue').each(function () {
        var location = $jpprTop(this).attr('href');
        var butName = $jpprTop(this).val();
        var butTitle = $jpprTop(this).val();
        if($jpprTop(this).hasClass('notallowed')){
            var disabled = ' disabled';
            butTitle = 'Not allowed for your membership plan';
            var notallowedclass = ' notallowed';
        } else {
            var disabled = '';
            var notallowedclass = '';
        }
        if (addType == 1) {
            var jButton = $jpprTop('<button type="button" title="' + butTitle + '" style="margin-top:5px;" class="button btn-cart bqueue' + notallowedclass + '" onclick="setLocation(\'' + location + '\')" ' + disabled + '><span><span>' + butName + '</span></span></button>');
            var nextDiv = getActionsDiv($jpprTop(this).parent(), true);
            if (nextDiv.length > 0) {
                nextDiv.after(jButton);
                if ($jpprTop(this).parent().find('.ppr_attr_butname').length == 0 && $jpprTop(this).parent().find('.ppr_attr_butname_global').length == 0) {
                    if(nextDiv.hasClass('button')){
                        nextDiv.remove();
                    }else {
                        nextDiv.find('.button').not('.bqueue').remove();
                    }
                }
            }
        }  else {
            var jButton = $jpprTop('<button type="button" title="' + butTitle + '" style="margin-left:5px;" class="button btn-cart btn-cart-bqueue' + notallowedclass + '" onclick="addElementTo();productAddToCartForm.submit(this)" ' + disabled + '><span><span>' + butName + '</span></span></button>');
            var but = $jpprTop('#product_addtocart_form').find('.add-to-cart .btn-cart').not('.btn-cart-bqueue, .btn-cart-bqueueall').last().parent();

            if ($jpprTop(this).parent().find('.ppr_attr_butname').length == 0 && $jpprTop(this).parent().find('.ppr_attr_butname_global').length == 0) {
                but.html('');
            }

            //console.log('ddd'+$jpprTop('#product_addtocart_form').find('.grouped-items-table').length);
            if($jpprTop('#product_addtocart_form').find('.grouped-items-table').length > 0){
                var jButton2 = $jpprTop('<button type="button" title="' + butTitle + '" style="margin-left:5px;" class="button btn-cart btn-cart-bqueue' + notallowedclass + '" onclick="setLocation(\''+location+'\')" ' + disabled + '><span><span>' + butName + '</span></span></button>');
                $jpprTop(this).parent().parent().append(jButton2);
                var butNameAll = 'Add All to Queue';
                var jButtonAll = $jpprTop('<button type="button" title="' + butTitle + '" style="margin-left:5px;" class="button btn-cart btn-cart-bqueueall' + notallowedclass + '" onclick="addElementTo();productAddToCartForm.submit(this)" ' + disabled + '><span><span>' + butNameAll + '</span></span></button>');
                but.append(jButtonAll);
            }else{
                if(!$jpprTop(this).parents('.block-related, .block-best-seller').length)
                    but.append(jButton);
            }

        }

    });

    $jpprTop('.ppr_attr_buyout').each(function () {
        var location = $jpprTop(this).attr('href');
        var butName = $jpprTop(this).val();
        if (addType == 1) {
            var jButton = $jpprTop('<button type="button" title="' + butName + '" style="margin-top:5px" class="button btn-cart" onclick="setLocation(\'' + location + '\')"><span><span>' + butName + '</span></span></button>');
            var nextDiv = getActionsDiv($jpprTop(this).parent(), true);
            if (nextDiv.length > 0) {
                nextDiv.after(jButton);
                //adjustCss(nextDiv);
            }
        } else {
            var jButton = $jpprTop('<button type="button" title="' + butName + '" style="margin-left:5px;" class="button btn-cart-buyout" onclick="setBuyoutToTrue();productAddToCartForm.submit(this)"><span><span>' + butName + '</span></span></button>');
            var buyoutField = $jpprTop('<input type="hidden" name="buyout" id="buyout" class="buyout-hidden" value="false"/>');
            $jpprTop('#product_addtocart_form').find('.btn-cart-buyout').remove();
            $jpprTop('#product_addtocart_form').find('.buyout-hidden').remove();
            var but = $jpprTop('#product_addtocart_form').find('.add-to-cart .btn-cart').not('.bqueue').last().parent();
            if(but.hasClass('over-btn')){
                but = but.parent();
            }
            $jpprTop('#product_addtocart_form').append(buyoutField);
            but.append(jButton);
        }
    });


    if (addType == 1) {
        $jpprTop('.ppr_attr_qty').each(function () {
            var prId = $jpprTop(this).attr('prid');
            var qtyName = $jpprTop(this).val();
            var htmlQty = $jpprTop('<div class="qty" style="margin-top: 5px;">' +
            '<label for="qty-product-id-' + prId + '">' + qtyName + '</label>' +
            '<input style="width:40px;margin-bottom:5px;" class="product-qty" id="qty-product-id-' + prId + '" type="text" value="1"/>' +
            '</div>');
            var nextDiv = getActionsDiv($jpprTop(this).parent(), true);
            if (nextDiv.length > 0) {
                nextDiv.before(htmlQty);
                //adjustCss(nextDiv);
            }
        });
    } else {

    }
}

//$jpprTop(document).ready(function () {
    $jpprTop('.catalog-product-view .product-shop .price-box').hide();
    $jpprTop('.catalog-product-view .product-shop .price-box').first().show();
    var isProductView = $jpprTop('body').hasClass('catalog-product-view');
    var isWishlist = $('wishlist-view-form');
    if (!isProductView) {
        if(!isWishlist) {
            $jpprTop('.ppr_attr_butname, .ppr_attr_butname_global').each(function () {
                var nextDiv = getActionsDiv($jpprTop(this).parent(), true);
                if (nextDiv.length > 0) {
                    nextDiv.addClass('btn-cart-res');
                    changeText(nextDiv, $jpprTop(this).val());
                }
            });
        }
        if(!isWishlist) {
            $jpprTop('.ppr_attr_butname_global').each(function () {
                var nextDiv = getActionsDiv($jpprTop(this).parent(), true);
                var location = $jpprTop(this).attr('href');
                var butName = $jpprTop(this).val();
                var jButton = $jpprTop('<button type="button" title="' + butName + '" style="margin-bottom:5px;" class="button btn-cart btn-cart-res" onclick="setLocation(\'' + location + '\')"><span><span>' + butName + '</span></span></button>');
                nextDiv.after(jButton);
                nextDiv.remove();

            });
        }else{
            $jpprTop('.ppr_attr_butname_global').each(function () {
                if ($jpprTop(this).parents('form').length > 0) {
                    var nextDiv = $jpprTop(this).parent().parent().find('.btn-cart').first();
                    var location = $jpprTop(this).attr('href');
                    var butName = $jpprTop(this).val();
                    var jButton = $jpprTop('<button type="button" title="' + butName + '" style="margin-bottom:5px;" class="button btn-cart btn-cart-res" onclick="setLocation(\'' + location + '\')"><span><span>' + butName + '</span></span></button>');
                    nextDiv.after(jButton);
                }
            });
        }

        addQueueAndBuyoutButtons(1);

        $jpprTop('.product-qty').each(function (el) {
            var nextDiv = $jpprTop(this).parent().parent();
            var but = nextDiv.find('.btn-cart');
            if (but.length > 0) {
                $jpprTop(this).keyup(function () {
                    if ($jpprTop.isNumeric($jpprTop(this).val())) {
                        var pId = $jpprTop(this).attr('id').replace('qty-', '');
                        var oldQty = $jpprTop(this).val();
                        var baseUrl = but.attr('onclick').substr(0, but.attr('onclick').indexOf('?') + 1).replace("setLocation('", '');
                        var params = but.attr('onclick').substr(but.attr('onclick').indexOf('?') + 1, but.attr('onclick').length).replace("')", '').toQueryParams();
                        params['qty'] = $jpprTop(this).val();
                        params['options[qty]'] = $jpprTop(this).val();
                        $jpprTop.each(params, function (key, element) {
                            params[key] = element.replace('+', ' ');
                        });
                        but.attr('onclick', "setLocation('" + baseUrl + $jpprTop.param(params) + "')");
                    }
                });
            }
        });
    } else {
        var pricingDiv = $jpprTop('#product_addtocart_form').find('.pricingppr');
        pricingDiv.css('display','none');
        $jpprTop('#product_addtocart_form .ppr_attr_butname, #product_addtocart_form .ppr_attr_butname_global').each(function () {

            var but = $jpprTop('#product_addtocart_form').find('.btn-cart');
            if (but.length > 0) {
                changeText(but, $jpprTop(this).val());
                var onclick = but.attr('onclick');
                onclick = 'disabledQty()' + ';' + onclick;
                but.attr('onclick', onclick);
            }

        });
        addQueueAndBuyoutButtons(2);
    }
//});
$jpprTop(window).load(function(){
    $jpprTop('.pricingppr').each(function(){
        var nextDiv = getActionsDiv($jpprTop(this));
        if (nextDiv.length > 0) {
            adjustCss(nextDiv);
        }
    });
    if($jpprTop('.pprproductid').length) {
        $jpprTop('.reservationCalendarDiv .price-box').hide();
        $jpprTop('#product_addtocart_form').find('.btn-cart').each(function () {
            $(this).disabled = true;
        });
    }

adjustHeightOfGridList();
});

</script>