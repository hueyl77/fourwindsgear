<script type="text/javascript">

/**
 * Shows loading icon
 * @param $_elem
 */
showAjaxLoader<?php echo $_jsFunctionPrefix ?> = function ($_elem) {
    $_elem.hide();
    $jppr("<span class='ajax_loader' style=''><img src='<?php echo $this->getSkinUrl('images/ajax-loader.gif')?>'/></span>").insertAfter($_elem);
};

/**
 * Hides loading icon
 * @param $_elem
 */

removeAjaxLoader<?php echo $_jsFunctionPrefix ?> = function ($_elem) {
    $_elem.parent().find('.ajax_loader').remove();
    $_elem.show();
};

/**
 * Price container is different for product types. This function updates the price when dates are changed
 * @param amount
 */

updatePriceHtml<?php echo $_jsFunctionPrefix?> = function (amount, formatAmount) {
    $jppr('<?php echo $_jsContainerPrefix ?> .price-box').html(formatAmount);
    $jppr('<?php echo $_jsContainerPrefix ?> .price-box').hide();
    if ($jppr('<?php echo $_jsContainerPrefix ?>  .product-options-bottom .price-box').length > 0) {
        if (amount > 0) {
            $jppr('<?php echo $_jsContainerPrefix ?> .product-options-bottom .price-box').show();
        }
    } else if (amount > 0) {
        $jppr('<?php echo $_jsContainerPrefix ?> .reservationCalendarDiv .price-box').show();
    }

    var startValue = $jppr('<?php echo $_jsContainerPrefix ?> .start_time').val();
    var endValue = $jppr('<?php echo $_jsContainerPrefix ?> .end_time').val();

    var startDateValue = Date.parseExact($jppr('<?php echo $_jsContainerPrefix ?> [name=read_start_date]').val(), '<?php echo $_locDateFormat;?>');
    var startDateFormated = $jppr.formatDateTime('yy-mm-dd', startDateValue);
    var startDate1 = new Date(startDateFormated + ' ' + startValue);

    var endDateValue = Date.parseExact($jppr('<?php echo $_jsContainerPrefix ?> [name=read_end_date]').val(), '<?php echo $_locDateFormat;?>');
    var endDateFormated = $jppr.formatDateTime('yy-mm-dd', endDateValue);
    var endDate1 = new Date(endDateFormated + ' ' + endValue);


    if(startDate1 != 'Invalid Date' && endDate1 != 'Invalid Date' && ($jppr('<?php echo $_jsContainerPrefix ?> [name=read_start_date]').val() == $jppr('<?php echo $_jsContainerPrefix ?> [name=read_end_date]').val())) {
        var allowSelectionMin = !(endDate1.getTime() - startDate1.getTime() + 1000 <= minRentalPeriod - addStartingDatePeriod);
        var allowSelectionMax = !((endDate1.getTime() - startDate1.getTime() > maxRentalPeriod) && maxRentalPeriod != 0);

        if (allowSelectionMin == false && minRentalPeriod > 0) {
            alert(minRentalPeriodMessage);
            $jppr('<?php echo $_jsContainerPrefix ?> .btn-cart').each(function () {
                $(this).disabled = true;
            });
            return false;
        }
        if (allowSelectionMax == false && maxRentalPeriod > 0) {
            alert(maxRentalPeriodMessage);
            $jppr('<?php echo $_jsContainerPrefix ?> .btn-cart').each(function () {
                $(this).disabled = true;
            });
            return false;
        }
    }
};

/**
 * Automatically select first available date when RTRW style is enabled
 * deprecated
 */

rtrwStyleAutomaticallySelectFirstAvailableDate = function(selfObj, availdate){
    <?php if(!$_useNonsequential && $_selectedArray !== false) :?>

    var availAsDate = Date.parseExact(availdate, 'yyyy-MM-dd');
    selectedToStartPeriod = availdate;
    if (selfObj.find('.start_date').val() != $jppr.formatDateTime('<?php echo $_datestr;?>', availAsDate) && availdate != '') {
        selfObj.find('.start_date').val($jppr.formatDateTime('<?php echo $_datestr;?>', availAsDate));
        selfObj.find('.datePicker').datepick('selectDateTd', availAsDate);
        return false;
    }

    <?php endif; ?>
    return true;
};

/**
 * This function is used to calculate the price when dates are changed
 * @param selfObj
 */
calculatePrice<?php echo $_jsFunctionPrefix ?> = function (selfObj, isGlobal) {
    if(typeof isGlobal == 'undefined'){
        isGlobal = false;
    }
    var paramGlobal;
    if(!isGlobal) {
        if ($jppr('<?php echo $_jsContainerPrefix ?> [name=start_date]').val() == '' && $jppr('<?php echo $_jsContainerPrefix ?> .readStartDate').val() != '') {
            $jppr('<?php echo $_jsContainerPrefix ?> [name=start_date]').val($jppr('<?php echo $_jsContainerPrefix ?> .readStartDate').val());
        }
        if ($jppr('<?php echo $_jsContainerPrefix ?> [name=end_date]').val() == '' && $jppr('<?php echo $_jsContainerPrefix ?> .readEndDate').val() != '') {
            $jppr('<?php echo $_jsContainerPrefix ?> [name=end_date]').val($jppr('<?php echo $_jsContainerPrefix ?> .readEndDate').val());
        }
        paramGlobal = '';
    }else{
        paramGlobal = '&' + $jppr('.calendarSelector').find('*').serialize();
    }

    var qtyDisabledArr = [];
    $jppr('<?php echo $_jsContainerPrefix ?> .qty-disabled').each(function () {
        qtyDisabledArr.push($jppr(this).attr('id'));
        $jppr(this).removeAttr('disabled');
    });
    if (typeof bundle !== 'undefined') {
        for (var option in bundle.config.selected) {
            if (bundle.config.options[option]) {
                for (var i = 0; i < bundle.config.selected[option].length; i++) {
                    if (bundle.config.options[option].selections[bundle.config.selected[option][i]].typeid == 'reservation') {
                        $jppr('<?php echo $_jsContainerPrefix ?> input[name="bundle_option_qty[' + option + ']"]').attr('onblur', '');
                        $jppr('<?php echo $_jsContainerPrefix ?> input[name="bundle_option_qty[' + option + ']"]').attr('onkeyup', '');
                    }
                }
            }
        }
    }
    if (typeof $jppr('<?php echo $_jsContainerPrefix ?>').data('wait_price') === 'undefined') {
        $jppr('<?php echo $_jsContainerPrefix ?>').data('wait_price', 1);
        $jppr.ajax({
            cache: false,
            dataType: 'json',
            type: 'post',
            url: '<?php echo $this->getUrl("payperrentals_front/ajax/getprice/", array('product_id'=>($_product?$_product->getId():0)))?>',
            data: selfObj.closest('form').find('*').serialize() + '&qty=' + $jppr('#qty').val() + paramGlobal,
            success: function (data) {
                $jppr('<?php echo $_jsContainerPrefix ?> .btn-cartgrouped').attr('onclick', data.onclick);

                $jppr('<?php echo $_jsContainerPrefix ?> .qty-disabled').each(function () {
                    $jppr(this).attr('disabled', 'disabled');
                });

                //rtrwStyleAutomaticallySelectFirstAvailableDate($selfID<?php echo $_jsFunctionPrefix ?>, data.availdate);

                if (!useGlobals && (data.amount == -1 /*|| data.isavail == false*/)) {
                    $jppr('<?php echo $_jsContainerPrefix ?> .btn-cart').each(function () {
                        $(this).disabled = true;
                        if ($jppr('<?php echo $_jsContainerPrefix ?> .readStartDate').val() == '' || $jppr('<?php echo $_jsContainerPrefix ?> .readEndDate').val() == '') {
                            $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').html('');
                        } else {
                            if (data.needsConfigure == true) {
                                $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').html(chooseOptionsForPrice);
                            } else if (data.amount == -1) {
                                $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').html(noPriceMessage);
                            } else {
                                $jppr('<?php echo $_jsContainerPrefix ?> .instock').html('Item is Out of Stock(Estimated Availability Date:' + data.availdate + ')');
                            }
                        }
                        $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').show();
                    });
                } else {
                    if (!isDisabledByTimes && !isDisabled) {
                        $jppr('<?php echo $_jsContainerPrefix ?> .btn-cart').each(function () {
                            $(this).disabled = false;
                            $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').hide();
                            $jppr('<?php echo $_jsContainerPrefix ?> .instock').html('Item is In Stock');
                        });
                    }
                    //updateBundleOrCustomOptionPrice(data);

                }
                removeAjaxLoader<?php echo $_jsFunctionPrefix ?>($jppr('<?php echo $_jsContainerPrefix ?> .product-options-bottom .price-box'));
                updatePriceHtml<?php echo $_jsFunctionPrefix ?>(data.amount, data.formatAmount);
                $jppr('<?php echo $_jsContainerPrefix ?>').removeData('wait_price');
            }
        });
    }
    if(!isGlobal) {
        <?php if(!$_useNonsequential):?>
        var dateObj1 = new Date(selfObj.find('.start_date').val());
        var startDateFormatted = $jppr.formatDateTime('<?php echo $_datestr;?> g:ii a', dateObj1);
        var dateObj2 = new Date(selfObj.find('.end_date').val());
        var endDateFormatted = $jppr.formatDateTime('<?php echo $_datestr;?> g:ii a', dateObj2);
        selfObj.find('.datesShow').html(startDateHtml + startDateFormatted + '<br/>' + endDateHtml + endDateFormatted);
        <?php endif;?>
    }
};

/**
 * This function updates the calendar with the booked dates, disabled dates etc.
 * @param selfObj
 */
updateBookedDates<?php echo $_jsFunctionPrefix ?> = function (selfObj) {
    showAjaxLoader<?php echo $_jsFunctionPrefix ?>($jppr('<?php echo $_jsContainerPrefix ?> .product-options-bottom .price-box'));
    var qtyDisabledArr = [];
    $jppr('<?php echo $_jsContainerPrefix ?> .qty-disabled').each(function () {
        qtyDisabledArr.push($jppr(this).attr('id'));
        $jppr(this).removeAttr('disabled');
    });

    if (typeof bundle !== 'undefined') {
        for (var option in bundle.config.selected) {
            if (bundle.config.options[option]) {
                for (var i = 0; i < bundle.config.selected[option].length; i++) {
                    if (bundle.config.options[option].selections[bundle.config.selected[option][i]].typeid == 'reservation') {
                        $jppr('<?php echo $_jsContainerPrefix ?> input[name="bundle_option_qty[' + option + ']"]').attr('onblur', '');
                        $jppr('<?php echo $_jsContainerPrefix ?> input[name="bundle_option_qty[' + option + ']"]').attr('onkeyup', '');
                    }
                }
            }
        }
    }

    $jppr.ajax({
        cache: false,
        dataType: 'json',
        type: 'post',
        url: '<?php echo $this->getUrl("payperrentals_front/ajax/updatebookedforproduct/", array('product_id'=>($_product?$_product->getId():0)))?>',
        data: selfObj.closest('form').find('*').serialize() + '&qty=' + $jppr('#qty').val(),
        success: function (data) {
            $jppr('<?php echo $_jsContainerPrefix ?> .qty-disabled').each(function () {
                $jppr(this).attr('disabled', 'disabled');
            });

            bookedDates = data.bookedDates;

            turnoverTimeBefore = data.turnoverTimeBefore;
            turnoverTimeAfter = data.turnoverTimeAfter;
            maxQty = data.maxQty;
            blockedDates = data.blockedDates.split(',');
            partiallyBooked = data.partiallyBooked;

            <?php /** Set disabled weeks days for selected shipping method. If product not allow select shipping methods this part ignore */ ?>

            if (typeof data.disabledForStartRange != 'undefined') {
                disabledDaysStart = data.disabledForStartRange;
            }

            if (typeof data.disabledForEndRange != 'undefined') {
                disabledDaysEnd = data.disabledForEndRange;
            }

            if (typeof data.disabledDatesPadding != 'undefined') {
                disabledDatesPadding = data.disabledDatesPadding;
            }

            if (typeof data.ignoreTurnoverDay != 'undefined') {
                ignoreTurnoverDay = data.ignoreTurnoverDay;
            }

            if (typeof data.shippingMinRentalPeriod != 'undefined') {
                if (parseInt(minRentalPeriod, 10) < parseInt(data.shippingMinRentalPeriod, 10) * 1000) {
                    minRentalPeriod = parseInt(data.shippingMinRentalPeriod, 10) * 1000;

                    if (typeof data.shippingMinRentalMessage != 'undefined') {
                        minRentalPeriodMessage = data.shippingMinRentalMessage;
                    }
                }
            }

            isDisabled = data.isDisabled;
            if (isDisabled) {
                $jppr('<?php echo $_jsContainerPrefix ?> .btn-cart').each(function () {
                    $(this).disabled = true;
                    if ($jppr('<?php echo $_jsContainerPrefix ?> .readStartDate').val() == '' || $jppr('<?php echo $_jsContainerPrefix ?> .readEndDate').val() == '') {
                        $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').html('');
                    } else {
                        $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').html(noQtyMessage);
                    }
                    $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').show();
                });
                if($jppr('.super-attribute-select').length > 0 || $jppr('.color-swatch-wrapper li').length > 0){
                    $jppr('.dateSelectedCalendar').hide();
                    if($jppr('.super-attribute-select').val() != '' || $jppr('.color-swatch-wrapper li.active').length > 0) {
                        if(data.isConfigurable == true){
                            alert('Maximum quantity for this option and product is: '+maxQty+' Press ok to adjust!');
                            $jppr('#qty').val(maxQty);
                            $jppr('#qty').trigger('change');
                            return false;
                        }else {
                            $jppr('.date-select-panel-disabled').show();
                        }
                    }else{
                        $jppr('.date-select-panel').show();
                    }
                }
            } else {
                $jppr('<?php echo $_jsContainerPrefix ?> .btn-cart').each(function () {
                    $(this).disabled = false;
                    $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').hide();
                });
                if ($$('.shipMethods').length != 0 && $('shipping_method_select_box') != null && $('shipping_method_select_box').value == 'null' && $('zip_code').value == '') {
                    //$jppr('.dateSelectedCalendar').show();
                    //$jppr('.date-select-panel').hide();
                }else{
                    $jppr('.dateSelectedCalendar').show();
                    $jppr('.date-select-panel').hide();
                    $jppr('.date-select-panel-disabled').hide();
                }
            }
            if (!data.isShoppingCartDates && !data.needsConfigure && data.isConfigurable == true) {
                $jppr('.normalPrice').html(data.normalPrice);
            }
            selfObj.find('.datePicker').remove();
            selfObj.find('.datePickerDiv').prepend('<div class="datePicker"></div>');
            createCalendar<?php echo $_jsFunctionPrefix ?>(selfObj);
            <?php if ($_selectedArray !== false): ?>
            calculatePrice<?php echo $_jsFunctionPrefix ?>(selfObj);
            <?php else: ?>
            removeAjaxLoader<?php echo $_jsFunctionPrefix ?>($jppr('<?php echo $_jsContainerPrefix ?> .product-options-bottom .price-box'));
            if ($jppr('<?php echo $_jsContainerPrefix ?> .readStartDate').val() == '' || $jppr('<?php echo $_jsContainerPrefix ?> .readEndDate').val() == '' || data.needsConfigure == true) {
                updatePriceHtml<?php echo $_jsFunctionPrefix ?>(0, 0);
                if (data.needsConfigure) {
                    $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').html(chooseOptionsForPrice);
                    $jppr('<?php echo $_jsContainerPrefix ?> .errorShow').show();
                }
            }
            if(!$jppr('.datesblock .calendarSelector .datesSelector').length) {
            <?php if (ITwebexperts_Payperrentals_Helper_Data::isUsingGlobalDatesShoppingCart()):?>
            updatePriceHtml<?php echo $_jsFunctionPrefix ?>(0, 0);
            <?php endif; ?>
            }
            <?php endif; ?>
            if(typeof createBusyTime<?php echo $_jsFunctionPrefix ?> == 'function') {
                createBusyTime<?php echo $_jsFunctionPrefix ?>('start');
                createBusyTime<?php echo $_jsFunctionPrefix ?>('end');
            }
            $jppr('<?php echo $_jsContainerPrefix ?> .start_time').trigger('change');
            return true;
        }
    });
};
</script>